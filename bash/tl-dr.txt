Bash gets commands by reading lines. As soon as it's read enough lines to compose a single command, bash begins running that command. Usually, commands are just a single line long. An interactive bash session reads lines from you at the prompt. Non-interactive bash processes read their command lines from a file or stream. Files with a #!hashbang as their first line (and the executable permission) can be started by your system's kernal like any other program.

Bash is a lax language interpreter, which means it will permit you to write ambiguous commands. Its syntax will not prevent you from writing commands that do things that are not what they seem. It is solely your responsibility to learn the syntax adequately, recognize the pitfalls and pick up the discipline to stick to the practices that avoid buggy code consistently.

Bash commands tell bash to perform a certain unit of work. These units of work cannot be subdivided: bash needs to know the whole command to be able to execute it. There are different kinds of commands for different types of operations. Some commands group other commends into blocks or test their result. Many command types are syntax sugar: their effect can be achieved differently, but they exist to make the job easier.

To run a command, bash 
uses the name of your 
command and performs a 
search for how to 
execute that command. 
In order, bash will 
check whether it has a 
*function* or *builtin* 
by that name. Failing 
that, it will try to 
run the name as a 
program. If bash finds 
no way to run your 
command, it will output 
an error message.

When bash needs to run 
a program, it uses the 
command name to perform 
a search. Bash searches 
the directories in your 
PATH *environment 
variable*, one by one, 
until it finds a 
directory that contains 
a program with the name 
of your command. To run 
a program that is not 
installed in a PATH 
directory, use the path 
to that program as your 
command's name.

To tell a command what to do, we pass it *arguments. In bash, arguments are *tokens*, also called *words*, that are separated from each other by blank space. To include blank space in an argument's value, you need to either *quote* the argument or *escape* the blank space within. Failing that, bash will break your arguments at its blank space. Quoting arguments also prevents other symbols in it from being accidentally interpreted as bash code, such as '$10 USD' (variable expansions), "*** NOTICE ***" (filename expansions), etc.

