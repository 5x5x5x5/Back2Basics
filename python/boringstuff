Computery words

C expression
R most basic programming instruction

C operator
R

C values

C evaluate

C precedence
R order of operations

C data type
R a category for values. There can be only one (per value).

C integer

C floating-point number

C string

C string concatenation

C string replication
R multiplying a str

C variable
R 'like a box in the computers memory where you can store a single value'

C statement

C assignment statement
R a variable name, assignment operator, value to store

C initialize a variable
R first time a value is stored in a variable

C overwiting a variable
R reassigning the value of a variable

C Variable name rules
R only one word, only letters numbers and _, cannot begin with number

C flow control

C condition
R context of flow control statements; evaluates down to a Boolean

C clause
R block of code; indentation level denoted

C program execution; execution
R current instruction

C if statement
R a clause consisting of an if keyword, a condition, : , an idented block of code

C else statement
R executed when preceding statements are evaluated as False consisting of an else keyword, : , an indented block of code

C elif statement
R another condition that is checked if the previous conditions are False; consisting of  an elif keyword, a condition, : , an indented code block

C while loop statement
R code block that executes so long as the while statement\'s condition is True consisting of the while keyword, a condition, : , an indented code block

C iteration
R each execution of a loop

C break statement
R immediately exit the loop

C continue statement
R command to reevaluate the condition of current loop and start over

C for loops
R Consists of the for keyword, a variable name, the in keyword, a call to the range() method, : , indent next code block

C range() function
R start, stop, step parameters

C import
R how you get da modules

C standard library
R set of modules that come with Python

C module
R program that contains a related group of functions that can be called in your program

C random, sys, os, math
R a couple of modules in the standard library

C from import statements
R the from keyword, followed by module name, the import keyword, followed by a star or function name

C Flow Control Summary
R By using expressions that evaluate to True or False (conditions) you can write programs that make decisions on what code to execute and what code to skip. You can execute code over and over again in a loop while a certain condition evaluates to True. Th break and continue statements are useful for exiting a loop or jumping back to the start.

C function
R mini-program within a program

C def statement
R defines a function name (and parameters)

C purpose of function
R group code that gets executed multiple time

C deduplicating code
R removing copy-and-pasted code

C arguments
R values passed to a function

C parameter
R a variable that an arguement is stored in when a function is called. not persistent.

C local scope
R value stored in a parameter is not accessible outside of a function

C return value
R the value a function call evaluates to

C return statement
R the return keyword, value or expression the function should return

Remember, expressions are composed of values and operators. A function call can be used in an expression because it evaluates to its return value.

C None value
R absence of value; the only value of NoneType (null, nil, undefined)

C keyword argument
R markers for optional parameter changes

C global scope
R variable value is stored outside of all functions; trump

C exception
R an error

C try statement
R

C except statement
R

C functions summary
R Functions are an important way to compartmentalize your code into logical groups. Since the vairable in functions exist int their own local scopes, the code in one function cannot directly affect the values of variables in other functions. This limits what code could be changing the values of your variables, which can be helpful when it comes to debugging your code. Paragragh. Functions are a great tool to help you organize your code. You can think of them as black boxes: They have inputs in the form of parameters and outputs in the form of return values, and the code in them doesn't affect variables in other functions. Paragraph. In previous chapters, a single error could cause your programs to crash. In this chapter, you learned about try and except statements, which can run code when an error has been detected. This can make your programs more resilient to common error cases.

C Lists
R Cool

C Indices
R

C Slices
R

C Sublists
R

C List length
R len()

C List Concatenation
R

C del command
R removes value from a list. del spam[2]

C Working with Lists
R Useful for storing a lot of variables.

C for i in range(len(someList))
R common technique in Python to iterate over the indices of a list

C in and not in operators
R

C multiple assignment trick
R assign multiple variables with the values in a list
size, color, disposition = catList